{"version":3,"sources":["WebView.tsx"],"names":["React","Platform","ScrollView","StyleSheet","WebView","injectFirst","NativeWebView","source","style","height","setHeight","useState","onMessage","event","Number","nativeEvent","data","flexGrow","BrowserWebView","flatStyles","flatten","createElement","width","src","uri","srcDoc","html","allowFullScreen","seamless","select","native","default"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,UAAnB,EAA+BC,UAA/B,QAA4D,cAA5D;AACA,SAASC,OAAT,QAAwB,sBAAxB;AAOA;AACA,MAAMC,WAAW,GAAI;AACrB;AACA;AACA;AACA,CAJA;;AAWA,MAAMC,aAA8B,GAAG,QAAuB;AAAA,MAAtB;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAsB;AAC5D,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,KAAK,CAACW,QAAN,CAAe,CAAf,CAA5B;;AACA,QAAMC,SAAS,GAAIC,KAAD,IAChBH,SAAS,CAACI,MAAM,CAACD,KAAK,CAACE,WAAN,CAAkBC,IAAnB,CAAP,CADX;;AAEA,sBACE,oBAAC,UAAD;AACE,IAAA,qBAAqB,EAAE;AAAEC,MAAAA,QAAQ,EAAE,CAAZ;AAAeR,MAAAA,MAAM,EAAE,CAAAD,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEC,MAAP,KAAiBA;AAAxC;AADzB,kBAGE,oBAAC,OAAD;AACE,IAAA,MAAM,EAAEF,MADV;AAEE,IAAA,KAAK,EAAEC,KAFT;AAGE,IAAA,kBAAkB,EAAEH,WAHtB;AAIE,IAAA,SAAS,EAAEO;AAJb,IAHF,CADF;AAYD,CAhBD;;AAkBA,MAAMM,cAA+B,GAAG,SAAuB;AAAA,MAAtB;AAAEX,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAsB;AAC7D,QAAMW,UAAU,GAAGhB,UAAU,CAACiB,OAAX,CAAmBZ,KAAnB,CAAnB;AACA,sBAAOR,KAAK,CAACqB,aAAN,CAAoB,QAApB,EAA8B;AACnCb,IAAAA,KAAK,EAAEW,UAD4B;AAEnCV,IAAAA,MAAM,EAAEU,UAAF,aAAEA,UAAF,uBAAEA,UAAU,CAAEV,MAFe;AAGnCa,IAAAA,KAAK,EAAEH,UAAF,aAAEA,UAAF,uBAAEA,UAAU,CAAEG,KAHgB;AAInCC,IAAAA,GAAG,EAAGhB,MAAH,aAAGA,MAAH,uBAAGA,MAAD,CAA8BiB,GAJA;AAKnCC,IAAAA,MAAM,EAAGlB,MAAH,aAAGA,MAAH,uBAAGA,MAAD,CAA+BmB,IALJ;AAMnCC,IAAAA,eAAe,EAAE,IANkB;AAOnCC,IAAAA,QAAQ,EAAE;AAPyB,GAA9B,CAAP;AASD,CAXD;;AAaA,eAAe3B,QAAQ,CAAC4B,MAAT,CAAgB;AAC7BC,EAAAA,MAAM,EAAExB,aADqB;AAE7ByB,EAAAA,OAAO,EAAEb;AAFoB,CAAhB,CAAf","sourcesContent":["import * as React from \"react\";\nimport { Platform, ScrollView, StyleSheet, ViewStyle } from \"react-native\";\nimport { WebView } from \"react-native-webview\";\nimport {\n  WebViewMessageEvent,\n  WebViewSourceHtml,\n  WebViewSourceUri,\n} from \"react-native-webview/lib/WebViewTypes\";\n\n// Auto-height fix (if this is not present, scrolling on Android does not work)\nconst injectFirst = `\n  window.ReactNativeWebView.postMessage(\n    Math.max(document.body.offsetHeight, document.body.scrollHeight)\n  );\n`;\n\ninterface Props {\n  source: WebViewSourceUri | WebViewSourceHtml;\n  style?: ViewStyle;\n}\n\nconst NativeWebView: React.FC<Props> = ({ source, style }) => {\n  const [height, setHeight] = React.useState(0);\n  const onMessage = (event: WebViewMessageEvent) =>\n    setHeight(Number(event.nativeEvent.data));\n  return (\n    <ScrollView\n      contentContainerStyle={{ flexGrow: 1, height: style?.height || height }}\n    >\n      <WebView\n        source={source}\n        style={style}\n        injectedJavaScript={injectFirst}\n        onMessage={onMessage}\n      />\n    </ScrollView>\n  );\n};\n\nconst BrowserWebView: React.FC<Props> = ({ source, style }) => {\n  const flatStyles = StyleSheet.flatten(style);\n  return React.createElement(\"iframe\", {\n    style: flatStyles,\n    height: flatStyles?.height,\n    width: flatStyles?.width,\n    src: (source as WebViewSourceUri)?.uri,\n    srcDoc: (source as WebViewSourceHtml)?.html,\n    allowFullScreen: true,\n    seamless: true,\n  });\n};\n\nexport default Platform.select({\n  native: NativeWebView,\n  default: BrowserWebView,\n});\n"]}