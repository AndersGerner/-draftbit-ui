{"version":3,"sources":["AudioPlayer.tsx"],"names":["React","Text","View","StyleSheet","TouchableHighlight","Audio","AntDesign","Slider","formatDuration","duration","seconds","Math","floor","minutes","hours","renderedHours","renderedMinutes","renderedSeconds","AudioPlayer","source","sound","setSound","useState","playing","setPlay","loading","setLoading","durationMillis","setDurationMillis","isDraggingSlider","setIsDraggingSlider","sliderPositionMillis","setSliderPositionMillis","onPlaybackStatusUpdate","status","isLoaded","isPlaying","positionMillis","setOnPlaybackStatusUpdate","useEffect","unloadAsync","undefined","loadAudio","s","Sound","createAsync","playAsync","playSound","pauseAsync","setTrackPosition","setPositionAsync","onSlidingComplete","sliderValue","onSliderChange","iconName","styles","container","marginRight","flex","create","backgroundColor","paddingHorizontal","paddingVertical","borderRadius","flexDirection","alignItems"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { Text, View, StyleSheet, TouchableHighlight } from \"react-native\";\nimport { Audio } from \"expo-av\";\nimport { AntDesign } from \"@expo/vector-icons\";\nimport Slider from \"@react-native-community/slider\";\n\nimport type { AVPlaybackSource, AVPlaybackStatus } from \"expo-av/build/AV\";\nimport type { Sound } from \"expo-av/build/Audio/Sound\";\n\nfunction formatDuration(duration: number) {\n  if (duration === 0 || duration === 1) return \"00:00\";\n\n  const seconds = Math.floor((duration / 1000) % 60);\n  const minutes = Math.floor((duration / (1000 * 60)) % 60);\n  const hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\n\n  const renderedHours = hours < 10 ? \"0\" + hours : hours;\n  const renderedMinutes = minutes < 10 ? \"0\" + minutes : minutes;\n  const renderedSeconds = seconds < 10 ? \"0\" + seconds : seconds;\n\n  if (hours > 0) {\n    return renderedHours + \":\" + renderedMinutes + \":\" + renderedSeconds;\n  }\n\n  return renderedMinutes + \":\" + renderedSeconds;\n}\n\nexport default function AudioPlayer({ source }: { source: AVPlaybackSource }) {\n  const [sound, setSound] = React.useState<Sound>();\n  const [playing, setPlay] = React.useState(false);\n  const [loading, setLoading] = React.useState(false);\n  const [durationMillis, setDurationMillis] = React.useState(1);\n  const [isDraggingSlider, setIsDraggingSlider] = React.useState(false);\n  const [sliderPositionMillis, setSliderPositionMillis] = React.useState(0);\n\n  const onPlaybackStatusUpdate = (status: AVPlaybackStatus) => {\n    if (status.isLoaded) {\n      if (status.isPlaying && !isDraggingSlider) {\n        setSliderPositionMillis(status.positionMillis);\n      }\n    }\n  };\n\n  const setOnPlaybackStatusUpdate = () => {\n    if (sound) {\n      sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n    }\n  };\n\n  React.useEffect(() => {\n    return sound\n      ? () => {\n          sound.unloadAsync();\n        }\n      : undefined;\n  }, [sound]);\n\n  async function loadAudio() {\n    setLoading(true);\n\n    const { sound: s, status } = await Audio.Sound.createAsync(source);\n    setSound(s);\n    setLoading(false);\n    setOnPlaybackStatusUpdate();\n\n    if (status.isLoaded && status.durationMillis) {\n      setDurationMillis(status.durationMillis);\n    }\n\n    s.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n\n    await s.playAsync();\n    setPlay(true);\n  }\n\n  async function playSound() {\n    if (sound && playing) {\n      await sound.pauseAsync();\n      setPlay(false);\n      return;\n    }\n\n    if (sound && !playing) {\n      await sound.playAsync();\n      setPlay(true);\n      return;\n    }\n\n    await loadAudio();\n  }\n\n  const setTrackPosition = async (positionMillis: number) => {\n    if (sound) {\n      await sound.setPositionAsync(positionMillis);\n    }\n  };\n\n  const onSlidingComplete = (sliderValue: number) => {\n    if (isDraggingSlider) {\n      setIsDraggingSlider(false);\n    }\n    setTrackPosition(sliderValue);\n  };\n\n  const onSliderChange = () => {\n    if (!isDraggingSlider) {\n      setIsDraggingSlider(true);\n    }\n  };\n\n  const iconName = loading ? \"loading1\" : !sound || !playing ? \"play\" : \"pause\";\n\n  return (\n    <View style={styles.container}>\n      <TouchableHighlight onPress={playSound} style={{ marginRight: 8 }}>\n        <AntDesign name={iconName} size={24} />\n      </TouchableHighlight>\n      <Text style={{ marginRight: 8 }}>\n        {formatDuration(sliderPositionMillis || 0)} /{\" \"}\n        {formatDuration(durationMillis || 0)}\n      </Text>\n      <Slider\n        style={{ flex: 1 }}\n        minimumTrackTintColor=\"#333\"\n        maximumTrackTintColor=\"#000000\"\n        thumbTintColor=\"black\"\n        minimumValue={0}\n        value={sliderPositionMillis}\n        maximumValue={durationMillis}\n        onValueChange={onSliderChange}\n        onSlidingComplete={onSlidingComplete}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: \"#eee\",\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 24,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n});\n"]}