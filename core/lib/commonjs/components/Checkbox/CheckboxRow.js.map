{"version":3,"sources":["CheckboxRow.tsx"],"names":["Direction","getCheckboxAlignment","parentDirection","direction","GroupDirection","Horizontal","Row","RowReverse","renderLabel","value","labelStyle","textStyle","CheckboxRow","Icon","label","status","onPress","labelContainerStyle","checkboxStyle","disabled","style","color","uncheckedColor","rest","values","selectedValues","onValueChange","Array","isArray","isChecked","includes","handlePress","textStyles","viewStyles","styles","mainParent","flexDirection","alignItems","flex","StyleSheet","create","justifyContent","paddingStart","minHeight","paddingEnd","Platform","select","web","cursor","userSelect"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {\n  StyleProp,\n  ViewStyle,\n  StyleSheet,\n  TextStyle,\n  View,\n  Platform,\n} from \"react-native\";\nimport Checkbox, { CheckboxProps } from \"./Checkbox\";\nimport Text from \"../Text\";\nimport { useCheckboxGroupContext } from \"./context\";\nimport type { IconSlot } from \"../../interfaces/Icon\";\nimport { Direction as GroupDirection } from \"./context\";\nimport Touchable from \"../Touchable\";\nimport { extractStyles } from \"../../utilities\";\n\nexport enum Direction {\n  Row = \"row\",\n  RowReverse = \"row-reverse\",\n}\n\nexport interface CheckboxRowProps extends Omit<CheckboxProps, \"onPress\"> {\n  label: string | React.ReactNode;\n  value: string; // A string that this checkbox represents\n  labelContainerStyle: StyleProp<ViewStyle>;\n  checkboxStyle?: StyleProp<ViewStyle>;\n  labelStyle?: StyleProp<TextStyle>;\n  onPress?: (value: boolean) => void;\n  direction?: Direction;\n  color: string;\n  unselectedColor: string;\n}\n\nconst getCheckboxAlignment = (\n  parentDirection: GroupDirection | undefined,\n  direction: Direction\n) => {\n  if (parentDirection === GroupDirection.Horizontal) {\n    return direction === Direction.Row ? \"flex-start\" : \"flex-end\";\n  } else if (direction === Direction.RowReverse) {\n    return \"flex-start\";\n  } else {\n    return \"flex-end\";\n  }\n};\n\nconst renderLabel = (\n  value: string | React.ReactNode,\n  labelStyle: StyleProp<TextStyle>,\n  textStyle: StyleProp<TextStyle>\n) => {\n  if (typeof value === \"string\") {\n    return <Text style={[labelStyle, textStyle]}>{value}</Text>;\n  } else {\n    return <>{value}</>;\n  }\n};\n\nconst CheckboxRow: React.FC<CheckboxRowProps & IconSlot> = ({\n  Icon,\n  label = \"Label\",\n  status,\n  value,\n  onPress = () => {},\n  labelContainerStyle,\n  labelStyle,\n  checkboxStyle,\n  direction = Direction.Row,\n  disabled,\n  style,\n  color,\n  uncheckedColor,\n  ...rest\n}) => {\n  const {\n    values: selectedValues,\n    onValueChange,\n    direction: parentDirection,\n  } = useCheckboxGroupContext();\n\n  const values = Array.isArray(selectedValues) ? selectedValues : [];\n  const isChecked = status || values.includes(value);\n\n  const handlePress = () => {\n    if (!disabled) {\n      onPress(!isChecked);\n      onValueChange && onValueChange(value, !isChecked);\n    }\n  };\n\n  const { textStyles, viewStyles } = extractStyles(style);\n\n  return (\n    <Touchable\n      onPress={handlePress}\n      style={[styles.mainParent, { flexDirection: direction }, viewStyles]}\n      disabled={disabled}\n      {...rest}\n    >\n      <View\n        style={[\n          styles.label,\n          {\n            alignItems: direction === Direction.Row ? \"flex-start\" : \"flex-end\",\n          },\n          labelContainerStyle,\n        ]}\n      >\n        {renderLabel(label, labelStyle, textStyles)}\n      </View>\n      <View\n        style={{\n          flex: 1,\n          alignItems: getCheckboxAlignment(parentDirection, direction),\n        }}\n      >\n        <Checkbox\n          Icon={Icon}\n          status={isChecked}\n          onPress={handlePress}\n          style={checkboxStyle}\n          disabled={disabled}\n          color={color}\n          uncheckedColor={uncheckedColor}\n        />\n      </View>\n    </Touchable>\n  );\n};\n\nconst styles = StyleSheet.create({\n  mainParent: {\n    alignItems: \"center\",\n    justifyContent: \"space-around\",\n    paddingStart: 20,\n    minHeight: 50,\n    paddingEnd: 20,\n    flex: 1,\n    ...Platform.select({\n      web: {\n        cursor: \"pointer\",\n        userSelect: \"none\",\n      },\n    }),\n  },\n  label: {\n    flex: 3,\n  },\n});\n\nexport default CheckboxRow;\n"]}