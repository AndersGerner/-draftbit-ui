{"version":3,"sources":["Checkbox.tsx"],"names":["Checkbox","Icon","status","disabled","onPress","color","uncheckedColor","defaultValue","checkedIcon","uncheckedIcon","size","style","rest","internalValue","setInternalValue","React","useState","useEffect","previousDefaultValue","Boolean","colors","checkboxColor","primary","handlePress","styles","container","width","height","icon","StyleSheet","absoluteFill","fillContainer","fill","opacity","borderColor","create","borderRadius","alignItems","justifyContent","alignSelf"],"mappings":";;;;;;;AAAA;;AACA;;AAOA;;AAGA;;AACA;;;;;;;;;;AAeA,MAAMA,QAAsE,GAC1E,QAaM;AAAA,MAbL;AACCC,IAAAA,IADD;AAECC,IAAAA,MAFD;AAGCC,IAAAA,QAAQ,GAAG,KAHZ;AAICC,IAAAA,OAAO,GAAG,MAAM,CAAE,CAJnB;AAKCC,IAAAA,KALD;AAMCC,IAAAA,cAND;AAOCC,IAAAA,YAPD;AAQCC,IAAAA,WAAW,GAAG,wCARf;AASCC,IAAAA,aAAa,GAAG,+CATjB;AAUCC,IAAAA,IAAI,GAAG,EAVR;AAWCC,IAAAA,KAXD;AAYC,OAAGC;AAZJ,GAaK;AACJ,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCC,KAAK,CAACC,QAAN,CACxCd,MAAM,IAAIK,YAAV,IAA0B,KADc,CAA1C;AAIAQ,EAAAA,KAAK,CAACE,SAAN,CAAgB,MAAM;AACpB,QAAIf,MAAM,IAAI,IAAd,EAAoB;AAClBY,MAAAA,gBAAgB,CAACZ,MAAD,CAAhB;AACD;AACF,GAJD,EAIG,CAACA,MAAD,CAJH,EALI,CAWJ;AACA;;AACA,QAAMgB,oBAAoB,GAAG,wBAAYX,YAAZ,CAA7B;AAGAQ,EAAAA,KAAK,CAACE,SAAN,CAAgB,MAAM;AACpB,QAAIV,YAAY,KAAKW,oBAArB,EAA2C;AACzCJ,MAAAA,gBAAgB,CAACK,OAAO,CAACZ,YAAD,CAAR,CAAhB;AACD;AACF,GAJD,EAIG,CAACA,YAAD,EAAeW,oBAAf,CAJH;AAMA,QAAM;AAAEE,IAAAA;AAAF,MAAa,wBAAnB;AAEA,QAAMC,aAAa,GAAGR,aAAa,GAC/BR,KAAK,IAAIe,MAAM,CAACE,OADe,GAE/BhB,cAAc,IAAIc,MAAM,CAACE,OAF7B;;AAIA,QAAMC,WAAW,GAAG,MAAM;AACxBT,IAAAA,gBAAgB,CAAC,CAACD,aAAF,CAAhB;AACAT,IAAAA,OAAO,CAAC,CAACS,aAAF,CAAP;AACD,GAHD;;AAKA,sBACE,oBAAC,kBAAD,eACMD,IADN;AAEE,IAAA,OAAO,EAAEW,WAFX;AAGE,IAAA,QAAQ,EAAEpB,QAHZ;AAIE,IAAA,kBAAkB,EAAE;AAAEA,MAAAA;AAAF,KAJtB;AAKE,IAAA,iBAAiB,EAAC,QALpB;AAME,IAAA,uBAAuB,EAAC,QAN1B;AAOE,IAAA,KAAK,EAAE,CAACqB,MAAM,CAACC,SAAR,EAAmBd,KAAnB,EAA0B;AAAEe,MAAAA,KAAK,EAAEhB,IAAT;AAAeiB,MAAAA,MAAM,EAAEjB;AAAvB,KAA1B;AAPT,mBASE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAEc,MAAM,CAACI,IADhB;AAEE,IAAA,IAAI,EAAEf,aAAa,GAAGL,WAAH,GAAiBC,aAFtC;AAGE,IAAA,IAAI,EAAEC,IAHR;AAIE,IAAA,KAAK,EAAEW;AAJT,IATF,eAeE,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAE,CAACQ,wBAAWC,YAAZ,EAA0BN,MAAM,CAACO,aAAjC;AAAb,kBACE,oBAAC,iBAAD;AACE,IAAA,KAAK,EAAE,CACLP,MAAM,CAACQ,IADF,EAEL;AAAEC,MAAAA,OAAO,EAAE9B,QAAQ,GAAG,GAAH,GAAS;AAA5B,KAFK,EAGL;AAAE+B,MAAAA,WAAW,EAAEb;AAAf,KAHK;AADT,IADF,CAfF,CADF;AA2BD,CA1EH;;AA4EA,MAAMG,MAAM,GAAGK,wBAAWM,MAAX,CAAkB;AAC/BV,EAAAA,SAAS,EAAE;AACTW,IAAAA,YAAY,EAAE;AADL,GADoB;AAI/BL,EAAAA,aAAa,EAAE;AACbM,IAAAA,UAAU,EAAE,QADC;AAEbC,IAAAA,cAAc,EAAE;AAFH,GAJgB;AAQ/BV,EAAAA,IAAI,EAAE;AACJW,IAAAA,SAAS,EAAE;AADP,GARyB;AAW/BP,EAAAA,IAAI,EAAE;AACJI,IAAAA,YAAY,EAAE,CADV;AAEJV,IAAAA,KAAK,EAAE,EAFH;AAGJC,IAAAA,MAAM,EAAE,EAHJ;AAIJY,IAAAA,SAAS,EAAE;AAJP;AAXyB,CAAlB,CAAf;;eAmBevC,Q","sourcesContent":["import * as React from \"react\";\nimport {\n  View,\n  StyleSheet,\n  TouchableHighlightProps,\n  StyleProp,\n  ViewStyle,\n} from \"react-native\";\nimport { useTheme } from \"../../theming\";\nimport type { IconSlot } from \"../../interfaces/Icon\";\n\nimport Touchable from \"../Touchable\";\nimport { usePrevious } from \"../../hooks\";\n\nexport interface CheckboxProps {\n  status?: boolean;\n  disabled?: boolean;\n  onPress?: (checked: boolean) => void;\n  color?: string;\n  uncheckedColor?: string;\n  checkedIcon?: string;\n  uncheckedIcon?: string;\n  defaultValue?: boolean;\n  size?: number;\n  style?: StyleProp<ViewStyle>;\n}\n\nconst Checkbox: React.FC<CheckboxProps & TouchableHighlightProps & IconSlot> =\n  ({\n    Icon,\n    status,\n    disabled = false,\n    onPress = () => {},\n    color,\n    uncheckedColor,\n    defaultValue,\n    checkedIcon = \"MaterialCommunityIcons/checkbox-marked\",\n    uncheckedIcon = \"MaterialCommunityIcons/checkbox-blank-outline\",\n    size = 24,\n    style,\n    ...rest\n  }) => {\n    const [internalValue, setInternalValue] = React.useState<boolean>(\n      status || defaultValue || false\n    );\n\n    React.useEffect(() => {\n      if (status != null) {\n        setInternalValue(status);\n      }\n    }, [status]);\n\n    // This special logic is to handle weird APIs like Airtable that return\n    // true or undefined for a boolean\n    const previousDefaultValue = usePrevious(defaultValue) as\n      | boolean\n      | undefined;\n    React.useEffect(() => {\n      if (defaultValue !== previousDefaultValue) {\n        setInternalValue(Boolean(defaultValue));\n      }\n    }, [defaultValue, previousDefaultValue]);\n\n    const { colors } = useTheme();\n\n    const checkboxColor = internalValue\n      ? color || colors.primary\n      : uncheckedColor || colors.primary;\n\n    const handlePress = () => {\n      setInternalValue(!internalValue);\n      onPress(!internalValue);\n    };\n\n    return (\n      <Touchable\n        {...rest}\n        onPress={handlePress}\n        disabled={disabled}\n        accessibilityState={{ disabled }}\n        accessibilityRole=\"button\"\n        accessibilityLiveRegion=\"polite\"\n        style={[styles.container, style, { width: size, height: size }]}\n      >\n        <Icon\n          style={styles.icon}\n          name={internalValue ? checkedIcon : uncheckedIcon}\n          size={size}\n          color={checkboxColor}\n        />\n        <View style={[StyleSheet.absoluteFill, styles.fillContainer]}>\n          <View\n            style={[\n              styles.fill,\n              { opacity: disabled ? 0.5 : 1 },\n              { borderColor: checkboxColor },\n            ]}\n          />\n        </View>\n      </Touchable>\n    );\n  };\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n  },\n  fillContainer: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  icon: {\n    alignSelf: \"center\",\n  },\n  fill: {\n    borderRadius: 5,\n    width: 30,\n    height: 30,\n    alignSelf: \"center\",\n  },\n});\n\nexport default Checkbox;\n"]}