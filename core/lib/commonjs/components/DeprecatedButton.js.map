{"version":3,"sources":["DeprecatedButton.tsx"],"names":["Button","Icon","icon","disabled","type","loading","labelColor","color","colorOverride","children","onPress","elevation","style","theme","colors","disabledOpacity","roundness","typography","rest","backgroundColor","borderColor","textColor","borderWidth","buttonColor","primary","surface","alpha","rgb","string","StyleSheet","hairlineWidth","buttonStyle","borderRadius","textStyle","textAlign","marginVertical","marginHorizontal","iconStyle","styles","marginLeft","marginRight","width","Config","buttonIconSize","margin","marginEnd","marginTop","marginBottom","innerStyles","flatten","margins","alignSelf","button","content","create","minWidth","borderStyle","flexDirection","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {\n  ActivityIndicator,\n  View,\n  Text,\n  StyleSheet,\n  TouchableHighlightProps,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n} from \"react-native\";\nimport color from \"color\";\nimport Config from \"./Config\";\nimport Touchable from \"./Touchable\";\nimport Elevation from \"./Elevation\";\nimport { withTheme } from \"../theming\";\n\nimport type { Theme } from \"../styles/DefaultTheme\";\nimport type { IconSlot } from \"../interfaces/Icon\";\n\n/**\n * A button is component that the user can press to trigger an action.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/button-1.png\" />\n *     <figcaption>Text button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-2.png\" />\n *     <figcaption>Outlined button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-3.png\" />\n *     <figcaption>Contained button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from '@draftbit/ui';\n *\n * const MyComponent = () => (\n *   <Button icon=\"add-a-photo\" type=\"solid\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\ntype Props = {\n  disabled?: boolean;\n  type?: \"solid\" | \"outline\" | \"text\";\n  loading?: boolean;\n  icon?: string;\n  labelColor?: string;\n  color?: string;\n  children?: React.ReactNode;\n  onPress: () => void;\n  elevation?: number;\n  style?: StyleProp<ViewStyle>;\n  theme: Theme;\n} & TouchableHighlightProps &\n  IconSlot;\n\nconst Button: React.FC<Props> = ({\n  Icon,\n  icon,\n  disabled = false,\n  type = \"solid\",\n  loading = false,\n  labelColor,\n  color: colorOverride,\n  children,\n  onPress,\n  elevation = 0,\n  style,\n  theme: { colors, disabledOpacity, roundness, typography },\n  ...rest\n}) => {\n  let backgroundColor, borderColor, textColor, borderWidth;\n  const buttonColor = colorOverride || colors.primary;\n\n  if (type === \"solid\") {\n    backgroundColor = buttonColor;\n\n    if (disabled) {\n      textColor = color(colors.surface).alpha(disabledOpacity).rgb().string();\n    } else {\n      textColor = labelColor || colors.surface;\n    }\n  } else {\n    backgroundColor = \"transparent\";\n\n    if (disabled) {\n      textColor = color(buttonColor).alpha(disabledOpacity).rgb().string();\n    } else {\n      textColor = labelColor || buttonColor;\n    }\n  }\n\n  if (type === \"outline\") {\n    if (disabled) {\n      borderColor = color(buttonColor).alpha(disabledOpacity).rgb().string();\n    } else {\n      borderColor = buttonColor;\n    }\n    borderWidth = StyleSheet.hairlineWidth;\n  } else {\n    borderColor = \"transparent\";\n    borderWidth = 0;\n  }\n\n  const buttonStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius: roundness,\n  };\n\n  const textStyle: StyleProp<TextStyle> = {\n    textAlign: \"center\",\n    color: textColor,\n    marginVertical: 16,\n    marginHorizontal: 16,\n  };\n\n  const iconStyle = [\n    styles.icon,\n    {\n      marginLeft: 16,\n      marginRight: -8,\n      width: Config.buttonIconSize,\n    },\n  ];\n\n  const {\n    margin,\n    marginEnd,\n    marginTop,\n    marginLeft,\n    marginRight,\n    marginBottom,\n    marginHorizontal,\n    marginVertical,\n    ...innerStyles\n  } = StyleSheet.flatten(style || {});\n\n  const margins = {\n    margin,\n    marginEnd,\n    marginTop,\n    marginLeft,\n    marginRight,\n    marginBottom,\n    marginHorizontal,\n    marginVertical,\n  };\n\n  return (\n    <Elevation style={{ elevation, alignSelf: \"stretch\", ...margins }}>\n      <Touchable\n        {...rest}\n        onPress={onPress}\n        accessibilityState={{ disabled }}\n        accessibilityRole=\"button\"\n        disabled={disabled || loading}\n        style={[styles.button, buttonStyle, innerStyles]}\n      >\n        <View style={styles.content}>\n          {icon && loading !== true ? (\n            <View style={iconStyle}>\n              <Icon\n                name={icon}\n                size={Config.buttonIconSize}\n                color={textColor}\n              />\n            </View>\n          ) : null}\n          {loading ? (\n            <ActivityIndicator\n              size=\"small\"\n              color={textColor}\n              style={iconStyle}\n            />\n          ) : null}\n          <Text numberOfLines={1} style={[textStyle, typography.button]}>\n            {children}\n          </Text>\n        </View>\n      </Touchable>\n    </Elevation>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: \"solid\",\n  },\n  content: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  icon: {\n    width: Config.buttonIconSize,\n  },\n});\n\nexport default withTheme(Button);\n"]}