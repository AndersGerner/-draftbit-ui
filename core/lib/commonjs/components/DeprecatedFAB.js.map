{"version":3,"sources":["DeprecatedFAB.js"],"names":["FAB","Icon","icon","disabled","type","loading","color","colorOverride","label","onPress","elevation","style","theme","colors","disabledOpacity","roundness","typography","rest","backgroundColor","borderColor","textColor","borderWidth","buttonColor","primary","surface","alpha","rgb","string","StyleSheet","hairlineWidth","buttonStyle","borderRadius","alignItems","justifyContent","buttonStyles","styles","button","contentStyle","content","textStyle","textAlign","iconStyle","width","Config","buttonIconSize","FABSize","height","FABBorderRadius","push","marginLeft","marginRight","margin","FABFixedHeight","alignSelf","React","createElement","Elevation","Touchable","accessibilityState","accessibilityRole","View","name","size","ActivityIndicator","Text","numberOfLines","create","borderStyle","flexDirection","fixed","left","right","bottom"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { ActivityIndicator, View, StyleSheet, } from \"react-native\";\nimport color from \"color\";\nimport Config from \"./Config\";\nimport Text from \"./Text\";\nimport Touchable from \"./Touchable\";\nimport Elevation from \"./Elevation\";\nimport { withTheme } from \"../theming\";\nconst FAB = ({ Icon, icon, disabled = false, type = \"solid\", loading = false, color: colorOverride, label, onPress, elevation = 0, style, theme: { colors, disabledOpacity, roundness, typography }, ...rest }) => {\n    let backgroundColor, borderColor, textColor, borderWidth;\n    const buttonColor = colorOverride || colors.primary;\n    if (type === \"standard\" || type === \"extended\" || type === \"fixed\") {\n        backgroundColor = buttonColor;\n        if (disabled) {\n            textColor = color(colors.surface).alpha(disabledOpacity).rgb().string();\n        }\n        else {\n            textColor = colors.surface;\n        }\n    }\n    else {\n        backgroundColor = \"transparent\";\n        if (disabled) {\n            textColor = color(buttonColor).alpha(disabledOpacity).rgb().string();\n        }\n        else {\n            textColor = buttonColor;\n        }\n    }\n    if (type === \"outline\") {\n        if (disabled) {\n            borderColor = color(buttonColor).alpha(disabledOpacity).rgb().string();\n        }\n        else {\n            borderColor = buttonColor;\n        }\n        borderWidth = StyleSheet.hairlineWidth;\n    }\n    else {\n        borderColor = \"transparent\";\n        borderWidth = 0;\n    }\n    const buttonStyle = {\n        backgroundColor,\n        borderColor,\n        borderWidth,\n        borderRadius: roundness,\n        alignItems: \"center\",\n        justifyContent: \"center\",\n    };\n    const buttonStyles = [styles.button, buttonStyle];\n    const contentStyle = [styles.content];\n    const textStyle = {\n        textAlign: \"center\",\n        color: textColor,\n    };\n    const iconStyle = [\n        styles.icon,\n        {\n            width: Config.buttonIconSize,\n        },\n    ];\n    if (type === \"standard\" || type === \"outline\") {\n        buttonStyle.width = Config.FABSize;\n        buttonStyle.height = Config.FABSize;\n        buttonStyle.borderRadius = Config.FABBorderRadius;\n        contentStyle.push({\n            width: Config.FABSize,\n            height: Config.FABSize,\n        });\n    }\n    if (type === \"extended\" || type === \"fixed\") {\n        iconStyle.push({\n            marginLeft: 16,\n            marginRight: -8,\n        });\n        textStyle.margin = 16;\n    }\n    if (type === \"fixed\") {\n        buttonStyles.push({\n            height: Config.FABFixedHeight,\n            alignSelf: \"stretch\",\n        });\n    }\n    return (React.createElement(Elevation, { style: [{ elevation }, style] },\n        React.createElement(Touchable, { ...rest, onPress: onPress, accessibilityState: { disabled }, accessibilityRole: \"button\", disabled: disabled || loading, style: buttonStyles },\n            React.createElement(View, { style: styles.content },\n                icon && loading !== true ? (React.createElement(View, { style: iconStyle },\n                    React.createElement(Icon, { name: icon, size: Config.buttonIconSize, color: textColor }))) : null,\n                loading ? (React.createElement(ActivityIndicator, { size: \"small\", color: textColor, style: iconStyle })) : null,\n                label ? (React.createElement(Text, { numberOfLines: 1, style: [textStyle, typography.button] }, label)) : null))));\n};\nconst styles = StyleSheet.create({\n    button: {\n        borderStyle: \"solid\",\n    },\n    content: {\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n    },\n    icon: {\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        width: Config.buttonIconSize,\n    },\n    fixed: {\n        left: 0,\n        right: 0,\n        bottom: 0,\n        height: 64,\n        borderRadius: 0,\n    },\n});\nexport default withTheme(FAB);\n"]}