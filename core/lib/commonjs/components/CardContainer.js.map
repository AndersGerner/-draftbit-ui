{"version":3,"sources":["CardContainer.tsx"],"names":["ICON_CONTAINER_SIZE","Config","cardIconSize","ICON_CONTAINER_PADDING","CardContainer","Icon","icon","image","cardImageUrl","title","leftDescription","rightDescription","textCentered","aspectRatio","elevation","numColumns","theme","colors","roundness","typography","style","onPress","rest","textJustification","titleStyle","headline6","headline5","borderRadius","overflow","backgroundColor","surface","uri","padding","flexDirection","alignItems","justifyContent","color","strong","marginTop","body2","medium","subtitle2","light","cardIconElevation","position","top","right","width","height","alpha","cardIconBackgroundOpacity","rgb","string"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  View,\n  ImageSourcePropType,\n  Text,\n  StyleProp,\n  ViewStyle,\n} from \"react-native\";\nimport color from \"color\";\nimport Image from \"./Image\";\nimport Card from \"./DeprecatedCardWrapper\";\nimport Elevation from \"./Elevation\";\nimport { withTheme } from \"../theming\";\nimport type { Theme } from \"../styles/DefaultTheme\";\nimport type { IconSlot } from \"../interfaces/Icon\";\n\nimport Config from \"./Config\";\nimport { justificationType } from \"./Justification\";\n\nconst ICON_CONTAINER_SIZE = Config.cardIconSize * 2;\nconst ICON_CONTAINER_PADDING = Config.cardIconSize / 2 - 1;\n\ntype Props = {\n  image?: string | ImageSourcePropType;\n  title?: string;\n  leftDescription?: string;\n  rightDescription?: string;\n  textCentered: boolean;\n  icon?: string;\n  aspectRatio?: number;\n  elevation?: number;\n  numColumns?: number;\n  theme: Theme;\n  style?: StyleProp<ViewStyle>;\n  onPress: () => void;\n} & IconSlot;\n\nconst CardContainer: React.FC<Props> = ({\n  Icon,\n  icon,\n  image = Config.cardImageUrl,\n  title,\n  leftDescription,\n  rightDescription,\n  textCentered,\n  aspectRatio = 1.5,\n  elevation = 2,\n  numColumns = 3,\n  theme: { colors, roundness, typography },\n  style,\n  onPress,\n  ...rest\n}) => {\n  let textJustification: justificationType;\n\n  let titleStyle;\n\n  if (textCentered && !rightDescription) {\n    textJustification = \"center\";\n  } else {\n    textJustification = \"space-between\";\n  }\n\n  switch (numColumns) {\n    case 2:\n      titleStyle = typography.headline6;\n      break;\n    case 3:\n      titleStyle = typography.headline5;\n      break;\n  }\n\n  return (\n    <Card style={style} onPress={onPress} numColumns={numColumns} {...rest}>\n      <Elevation style={{ elevation, borderRadius: roundness }}>\n        <View\n          style={{\n            borderRadius: roundness,\n            overflow: \"hidden\",\n            backgroundColor: colors.surface,\n          }}\n        >\n          <Image\n            style={{ aspectRatio }}\n            source={typeof image === \"string\" ? { uri: image } : image}\n            resizeMode=\"cover\"\n          />\n          <View\n            style={{\n              padding: numColumns === 1 ? 8 : 16,\n            }}\n          >\n            {title ? (\n              <View\n                style={{\n                  flexDirection: \"row\",\n                  alignItems: \"center\",\n                  justifyContent: textJustification,\n                }}\n              >\n                <Text\n                  numberOfLines={1}\n                  style={[titleStyle, { color: colors.strong }]}\n                >\n                  {title}\n                </Text>\n              </View>\n            ) : null}\n            {leftDescription ? (\n              <View\n                style={{\n                  flexDirection: \"row\",\n                  justifyContent: textJustification,\n                  alignItems: \"center\",\n                  marginTop: numColumns === 3 ? 4 : 4 / 2,\n                }}\n              >\n                <Text\n                  numberOfLines={1}\n                  style={[typography.body2, { color: colors.medium }]}\n                >\n                  {leftDescription}\n                </Text>\n                {rightDescription ? (\n                  <Text\n                    numberOfLines={1}\n                    style={[typography.subtitle2, { color: colors.light }]}\n                  >\n                    {rightDescription}\n                  </Text>\n                ) : null}\n              </View>\n            ) : null}\n          </View>\n          {icon ? (\n            <Elevation\n              style={{\n                elevation: Config.cardIconElevation,\n                position: \"absolute\",\n                top: 12,\n                right: 12,\n                width: ICON_CONTAINER_SIZE,\n                height: ICON_CONTAINER_SIZE,\n                padding: ICON_CONTAINER_PADDING,\n                borderRadius: ICON_CONTAINER_SIZE,\n                backgroundColor: color(colors.strong)\n                  .alpha(Config.cardIconBackgroundOpacity)\n                  .rgb()\n                  .string(),\n              }}\n            >\n              <Icon\n                name={icon}\n                size={Config.cardIconSize}\n                color={colors.surface}\n              />\n            </Elevation>\n          ) : null}\n        </View>\n      </Elevation>\n    </Card>\n  );\n};\n\nexport default withTheme(CardContainer);\n"]}