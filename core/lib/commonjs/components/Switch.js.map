{"version":3,"sources":["Switch.tsx"],"names":["Switch","value","defaultValue","disabled","onValueChange","activeTrackColor","inactiveTrackColor","activeThumbColor","inactiveThumbColor","theme","style","rest","activeTrackThemeColor","colors","primary","inactiveTrackThemeColor","activeThumbThemeColor","inactiveThumbThemeColor","checked","setChecked","React","useState","useEffect","previousDefaultValue","Boolean","false","true","bool","Row","label","direction","RowDirection","SwitchRow"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {\n  Switch as NativeSwitch,\n  SwitchProps,\n  StyleProp,\n  ViewStyle,\n} from \"react-native\";\nimport { withTheme } from \"../theming\";\nimport FormRow from \"./FormRow\";\nimport { RowDirection } from \"@draftbit/types\";\nimport type { Theme } from \"../styles/DefaultTheme\";\nimport { usePrevious } from \"../hooks\";\n\ntype Props = {\n  value?: boolean;\n  disabled?: boolean;\n  onValueChange?: (value: boolean) => void;\n  defaultValue?: boolean;\n  theme: Theme;\n  activeTrackColor: string;\n  inactiveTrackColor: string;\n  activeThumbColor: string;\n  inactiveThumbColor: string;\n} & SwitchProps;\n\nfunction Switch({\n  value,\n  defaultValue,\n  disabled,\n  onValueChange,\n  activeTrackColor,\n  inactiveTrackColor,\n  activeThumbColor,\n  inactiveThumbColor,\n  theme,\n  style,\n  ...rest\n}: Props) {\n  const activeTrackThemeColor = activeTrackColor || theme.colors.primary;\n  const inactiveTrackThemeColor = inactiveTrackColor || \"#EEE\";\n\n  const activeThumbThemeColor = activeThumbColor || \"#FFF\";\n  const inactiveThumbThemeColor = inactiveThumbColor || \"#FFF\";\n\n  const [checked, setChecked] = React.useState(value || defaultValue);\n\n  React.useEffect(() => {\n    if (value != null && value !== checked) {\n      setChecked(value);\n    }\n  }, [value, checked]);\n\n  // This special logic is to handle weird APIs like Airtable that return\n  // true or undefined for a boolean\n  const previousDefaultValue = usePrevious(defaultValue) as boolean | undefined;\n  React.useEffect(() => {\n    if (defaultValue !== previousDefaultValue) {\n      setChecked(Boolean(defaultValue));\n    }\n  }, [defaultValue, previousDefaultValue]);\n\n  return (\n    <NativeSwitch\n      value={checked}\n      disabled={disabled}\n      trackColor={{\n        false: inactiveTrackThemeColor,\n        true: activeTrackThemeColor,\n      }}\n      thumbColor={value ? activeThumbThemeColor : inactiveThumbThemeColor}\n      // @ts-ignore react-native-web only\n      activeThumbColor={activeThumbThemeColor}\n      ios_backgroundColor={inactiveTrackThemeColor}\n      style={style}\n      onValueChange={(bool) => {\n        setChecked(bool);\n        onValueChange && onValueChange(bool);\n      }}\n      {...rest}\n    />\n  );\n}\n\ntype RowProps = {\n  label: string;\n  direction: RowDirection;\n  style?: StyleProp<ViewStyle>;\n};\n\nfunction Row({\n  label = \"Label\",\n  direction = RowDirection.Row,\n  style,\n  value,\n  defaultValue,\n  disabled,\n  onValueChange,\n  activeTrackColor,\n  inactiveTrackColor,\n  activeThumbColor,\n  inactiveThumbColor,\n  theme,\n  ...rest\n}: Props & RowProps) {\n  const [checked, setChecked] = React.useState(\n    value != null ? value : defaultValue\n  );\n\n  React.useEffect(() => {\n    if (value != null) {\n      setChecked(value);\n    }\n  }, [value]);\n\n  React.useEffect(() => {\n    if (defaultValue != null) {\n      setChecked(defaultValue);\n    }\n  }, [defaultValue]);\n\n  return (\n    <FormRow\n      disabled={disabled}\n      onPress={() => {\n        setChecked(!checked);\n        onValueChange && onValueChange(!checked);\n      }}\n      label={label}\n      direction={direction}\n      style={style}\n      {...rest}\n    >\n      <Switch\n        theme={theme}\n        value={checked}\n        disabled={disabled}\n        onValueChange={onValueChange}\n        activeTrackColor={activeTrackColor}\n        inactiveTrackColor={inactiveTrackColor}\n        activeThumbColor={activeThumbColor}\n        inactiveThumbColor={inactiveThumbColor}\n      />\n    </FormRow>\n  );\n}\n\nconst SwitchRow = withTheme(Row);\nexport { SwitchRow };\nexport default withTheme(Switch);\n"]}