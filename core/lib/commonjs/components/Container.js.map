{"version":3,"sources":["Container.tsx"],"names":["Container","useThemeGutterPadding","borderColor","borderWidth","backgroundColor","backgroundImage","backgroundImageResizeMode","elevation","style","children","theme","rest","flex","flexGrow","flexWrap","flexBasis","flexShrink","flexDirection","alignContent","justifyContent","alignItems","padding","paddingTop","paddingBottom","paddingLeft","paddingRight","paddingVertical","paddingHorizontal","styleProp","StyleSheet","flatten","containerStyle","width","innerStyle","Wrap","Elevation","View","uri"],"mappings":";;;;;;;AAAA;;AACA;;AAQA;;AAEA;;;;;;;;;;AAiBA,MAAMA,SAA0B,GAAG,QAY7B;AAAA,MAZ8B;AAClCC,IAAAA,qBADkC;AAElCC,IAAAA,WAFkC;AAGlCC,IAAAA,WAHkC;AAIlCC,IAAAA,eAJkC;AAKlCC,IAAAA,eALkC;AAMlCC,IAAAA,yBANkC;AAOlCC,IAAAA,SAPkC;AAQlCC,IAAAA,KARkC;AASlCC,IAAAA,QATkC;AAUlCC,IAAAA,KAVkC;AAU3B;AACP,OAAGC;AAX+B,GAY9B;AACJ,QAAM;AACJC,IAAAA,IADI;AAEJC,IAAAA,QAFI;AAGJC,IAAAA,QAHI;AAIJC,IAAAA,SAJI;AAKJC,IAAAA,UALI;AAMJC,IAAAA,aANI;AAOJC,IAAAA,YAPI;AAQJC,IAAAA,cARI;AASJC,IAAAA,UATI;AAUJC,IAAAA,OAVI;AAWJC,IAAAA,UAXI;AAYJC,IAAAA,aAZI;AAaJC,IAAAA,WAbI;AAcJC,IAAAA,YAdI;AAeJC,IAAAA,eAfI;AAgBJC,IAAAA,iBAhBI;AAiBJ,OAAGC;AAjBC,MAkBFC,wBAAWC,OAAX,CAAmBtB,KAAnB,KAA6B,EAlBjC;AAoBA,QAAMuB,cAAoC,GAAG;AAC3C3B,IAAAA,eAD2C;AAE3CF,IAAAA,WAF2C;AAG3CC,IAAAA,WAH2C;AAI3C6B,IAAAA,KAAK,EAAE,MAJoC;AAK3C,OAAGJ;AALwC,GAA7C;AAQA,QAAMK,UAAgC,GAAG;AACvCrB,IAAAA,IADuC;AAEvCC,IAAAA,QAFuC;AAGvCC,IAAAA,QAHuC;AAIvCC,IAAAA,SAJuC;AAKvCC,IAAAA,UALuC;AAMvCC,IAAAA,aANuC;AAOvCC,IAAAA,YAPuC;AAQvCC,IAAAA,cARuC;AASvCC,IAAAA,UATuC;AAUvCC,IAAAA,OAVuC;AAWvCC,IAAAA,UAXuC;AAYvCC,IAAAA,aAZuC;AAavCC,IAAAA,WAbuC;AAcvCC,IAAAA,YAduC;AAevCC,IAAAA,eAfuC;AAgBvCC,IAAAA,iBAAiB,EAAEA,iBAAiB,IAAI1B,qBAArB,GAA6C,EAA7C,GAAkD;AAhB9B,GAAzC;AAmBA,QAAMiC,IAAI,GAAG3B,SAAS,GAAG4B,kBAAH,GAAeC,iBAArC;;AAEA,MAAI7B,SAAJ,EAAe;AACbwB,IAAAA,cAAc,CAACxB,SAAf,GAA2BA,SAA3B;AACD;;AAED,sBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACwB,cAAD,EAAiBvB,KAAjB;AAAb,KAA0CG,IAA1C,GACGN,eAAe,gBACd,oBAAC,4BAAD;AACE,IAAA,MAAM,EACJ,OAAOA,eAAP,KAA2B,QAA3B,GACI;AAAEgC,MAAAA,GAAG,EAAEhC;AAAP,KADJ,GAEIA,eAJR;AAME,IAAA,UAAU,EAAEC,yBANd;AAOE,IAAA,KAAK,EAAE;AACLM,MAAAA,IAAI,EAAE;AADD;AAPT,kBAWE,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAEqB;AAAb,KAA0BxB,QAA1B,CAXF,CADc,gBAed,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAEwB;AAAb,KAA0BxB,QAA1B,CAhBJ,CADF;AAqBD,CAvFD;;eAyFe,wBAAUT,SAAV,C","sourcesContent":["import * as React from \"react\";\nimport {\n  View,\n  ImageBackground,\n  ImageSourcePropType,\n  StyleProp,\n  StyleSheet,\n  ViewStyle,\n} from \"react-native\";\nimport { withTheme } from \"../theming\";\n\nimport Elevation from \"./Elevation\";\nimport type { Theme } from \"../styles/DefaultTheme\";\nimport { ResizeModeType } from \"./ResizeMode\";\n\ntype Props = {\n  theme: Theme;\n  useThemeGutterPadding: boolean;\n  borderColor: string;\n  borderWidth: number;\n  backgroundColor: string;\n  backgroundImage?: string | ImageSourcePropType;\n  backgroundImageResizeMode?: ResizeModeType;\n  elevation?: number;\n  style?: StyleProp<ViewStyle>;\n  children?: React.ReactNode;\n};\n\nconst Container: React.FC<Props> = ({\n  useThemeGutterPadding,\n  borderColor,\n  borderWidth,\n  backgroundColor,\n  backgroundImage,\n  backgroundImageResizeMode,\n  elevation,\n  style,\n  children,\n  theme, // eslint-disable-line @typescript-eslint/no-unused-vars\n  ...rest\n}) => {\n  const {\n    flex,\n    flexGrow,\n    flexWrap,\n    flexBasis,\n    flexShrink,\n    flexDirection,\n    alignContent,\n    justifyContent,\n    alignItems,\n    padding,\n    paddingTop,\n    paddingBottom,\n    paddingLeft,\n    paddingRight,\n    paddingVertical,\n    paddingHorizontal,\n    ...styleProp\n  } = StyleSheet.flatten(style) || {};\n\n  const containerStyle: StyleProp<ViewStyle> = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    width: \"100%\",\n    ...styleProp,\n  };\n\n  const innerStyle: StyleProp<ViewStyle> = {\n    flex,\n    flexGrow,\n    flexWrap,\n    flexBasis,\n    flexShrink,\n    flexDirection,\n    alignContent,\n    justifyContent,\n    alignItems,\n    padding,\n    paddingTop,\n    paddingBottom,\n    paddingLeft,\n    paddingRight,\n    paddingVertical,\n    paddingHorizontal: paddingHorizontal || useThemeGutterPadding ? 16 : 0,\n  };\n\n  const Wrap = elevation ? Elevation : View;\n\n  if (elevation) {\n    containerStyle.elevation = elevation;\n  }\n\n  return (\n    <Wrap style={[containerStyle, style]} {...rest}>\n      {backgroundImage ? (\n        <ImageBackground\n          source={\n            typeof backgroundImage === \"string\"\n              ? { uri: backgroundImage }\n              : backgroundImage\n          }\n          resizeMode={backgroundImageResizeMode}\n          style={{\n            flex: 1,\n          }}\n        >\n          <View style={innerStyle}>{children}</View>\n        </ImageBackground>\n      ) : (\n        <View style={innerStyle}>{children}</View>\n      )}\n    </Wrap>\n  );\n};\n\nexport default withTheme(Container);\n"]}