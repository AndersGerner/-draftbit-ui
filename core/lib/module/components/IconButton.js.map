{"version":3,"sources":["IconButton.tsx"],"names":["React","View","StyleSheet","ActivityIndicator","Pressable","Platform","withTheme","IconButton","Icon","icon","color","customColor","size","disabled","loading","onPress","theme","style","props","iconColor","colors","primary","pressed","styles","container","opacity","width","height","alignItems","justifyContent","create","select","web","cursor","userSelect"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,IADF,EAEEC,UAFF,EAGEC,iBAHF,EAMEC,SANF,EAQEC,QARF,QASO,cATP;AAUA,SAASC,SAAT,QAA0B,YAA1B;;AAgBA,MAAMC,UAA2B,GAAG,QAW9B;AAAA,MAX+B;AACnCC,IAAAA,IADmC;AAEnCC,IAAAA,IAFmC;AAGnCC,IAAAA,KAAK,EAAEC,WAH4B;AAInCC,IAAAA,IAAI,GAAG,EAJ4B;AAKnCC,IAAAA,QAAQ,GAAG,KALwB;AAMnCC,IAAAA,OAAO,GAAG,KANyB;AAOnCC,IAAAA,OAPmC;AAQnCC,IAAAA,KARmC;AASnCC,IAAAA,KATmC;AAUnC,OAAGC;AAVgC,GAW/B;AACJ,QAAMC,SAAS,GAAGR,WAAW,IAAIK,KAAK,CAACI,MAAN,CAAaC,OAA9C;AAEA,sBACE,oBAAC,SAAD;AACE,IAAA,OAAO,EAAEN,OADX;AAEE,IAAA,QAAQ,EAAEF,QAAQ,IAAIC,OAFxB;AAGE,IAAA,KAAK,EAAE,SAAiB;AAAA,UAAhB;AAAEQ,QAAAA;AAAF,OAAgB;AACtB,aAAO,CACLC,MAAM,CAACC,SADF,EAEL;AACEC,QAAAA,OAAO,EAAEH,OAAO,IAAIT,QAAX,GAAsB,IAAtB,GAA6B,CADxC;AAEEa,QAAAA,KAAK,EAAEd,IAFT;AAGEe,QAAAA,MAAM,EAAEf,IAHV;AAIEgB,QAAAA,UAAU,EAAE,QAJd;AAKEC,QAAAA,cAAc,EAAE;AALlB,OAFK,EASLZ,KATK,CAAP;AAWD;AAfH,KAgBMC,KAhBN,gBAkBE,oBAAC,IAAD,QACGT,IAAI,IAAI,CAACK,OAAT,gBACC,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEL,IAAZ;AAAkB,IAAA,IAAI,EAAEG,IAAI,GAAG,CAA/B;AAAkC,IAAA,KAAK,EAAEO;AAAzC,IADD,GAEG,IAHN,EAIGL,OAAO,gBAAG,oBAAC,iBAAD;AAAmB,IAAA,IAAI,EAAC,OAAxB;AAAgC,IAAA,KAAK,EAAEK;AAAvC,IAAH,GAA0D,IAJpE,CAlBF,CADF;AA2BD,CAzCD;;AA2CA,MAAMI,MAAM,GAAGrB,UAAU,CAAC4B,MAAX,CAAkB;AAC/BN,EAAAA,SAAS,EAAE;AACTI,IAAAA,UAAU,EAAE,QADH;AAETC,IAAAA,cAAc,EAAE,QAFP;AAGT,OAAGxB,QAAQ,CAAC0B,MAAT,CAAgB;AACjBC,MAAAA,GAAG,EAAE;AACHC,QAAAA,MAAM,EAAE,SADL;AAEHC,QAAAA,UAAU,EAAE;AAFT;AADY,KAAhB;AAHM;AADoB,CAAlB,CAAf;AAaA,eAAe5B,SAAS,CAACC,UAAD,CAAxB","sourcesContent":["import * as React from \"react\";\nimport {\n  View,\n  StyleSheet,\n  ActivityIndicator,\n  StyleProp,\n  ViewStyle,\n  Pressable,\n  PressableProps,\n  Platform,\n} from \"react-native\";\nimport { withTheme } from \"../theming\";\nimport type { Theme } from \"../styles/DefaultTheme\";\nimport type { IconSlot } from \"../interfaces/Icon\";\n\ntype Props = {\n  icon?: string;\n  color?: string;\n  size?: number;\n  disabled?: boolean;\n  loading?: boolean;\n  onPress: () => void;\n  theme: Theme;\n  style?: StyleProp<ViewStyle>;\n} & PressableProps &\n  IconSlot;\n\nconst IconButton: React.FC<Props> = ({\n  Icon,\n  icon,\n  color: customColor,\n  size = 32,\n  disabled = false,\n  loading = false,\n  onPress,\n  theme,\n  style,\n  ...props\n}) => {\n  const iconColor = customColor || theme.colors.primary;\n\n  return (\n    <Pressable\n      onPress={onPress}\n      disabled={disabled || loading}\n      style={({ pressed }) => {\n        return [\n          styles.container,\n          {\n            opacity: pressed || disabled ? 0.75 : 1,\n            width: size,\n            height: size,\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          },\n          style,\n        ];\n      }}\n      {...props}\n    >\n      <View>\n        {icon && !loading ? (\n          <Icon name={icon} size={size - 2} color={iconColor} />\n        ) : null}\n        {loading ? <ActivityIndicator size=\"small\" color={iconColor} /> : null}\n      </View>\n    </Pressable>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    ...Platform.select({\n      web: {\n        cursor: \"pointer\",\n        userSelect: \"none\",\n      },\n    }),\n  },\n});\n\nexport default withTheme(IconButton);\n"]}