{"version":3,"sources":["Slider.tsx"],"names":["React","View","StyleSheet","NativeSlider","isNumber","toNumber","withTheme","maybeParseValue","value","undefined","maybe","Slider","Icon","leftIcon","rightIcon","leftIconColor","rightIconColor","defaultValue","minimumTrackTintColor","maximumTrackTintColor","thumbTintColor","minimumValue","maximumValue","tapToSeek","step","onValueChange","style","theme","rest","internalValue","setInternalValue","useState","useEffect","minTrackColor","colors","primary","maxTrackColor","light","thumbColor","leftIconThemeColor","rightIconThemeColor","parsedValue","handleSlidingComplete","newValue","styles","container","slider","create","height","flexDirection","alignItems","flex","marginHorizontal"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { View, StyleSheet, StyleProp, ViewStyle } from \"react-native\";\nimport NativeSlider from \"@react-native-community/slider\";\nimport isNumber from \"lodash.isnumber\";\nimport toNumber from \"lodash.tonumber\";\n\nimport { withTheme } from \"../theming\";\nimport type { Theme } from \"../styles/DefaultTheme\";\nimport type { IconSlot } from \"../interfaces/Icon\";\n\nexport type Props = {\n  style?: StyleProp<ViewStyle>;\n  value?: number;\n  defaultValue?: number;\n  minimumTrackTintColor: string;\n  maximumTrackTintColor: string;\n  leftIcon?: string;\n  rightIcon?: string;\n  leftIconColor?: string;\n  rightIconColor?: string;\n  thumbTintColor?: string;\n  tapToSeek?: boolean;\n  minimumValue: number;\n  maximumValue: number;\n  step: number;\n  onValueChange?: (value: number) => void;\n  theme: Theme;\n} & IconSlot;\n\nfunction maybeParseValue(value: any) {\n  if (value === undefined) {\n    return undefined;\n  }\n\n  if (isNumber(value)) {\n    return value;\n  }\n\n  try {\n    const maybe = toNumber(value);\n    if (isNumber(maybe)) {\n      return maybe;\n    }\n  } catch {\n    return undefined;\n  }\n\n  return undefined;\n}\n\nfunction Slider({\n  Icon,\n  leftIcon,\n  rightIcon,\n  leftIconColor,\n  rightIconColor,\n  value,\n  defaultValue,\n  minimumTrackTintColor,\n  maximumTrackTintColor,\n  thumbTintColor,\n  minimumValue = 0,\n  maximumValue = 100,\n  tapToSeek,\n  step = 1,\n  onValueChange = () => {},\n  style,\n  theme,\n  ...rest\n}: Props) {\n  const [internalValue, setInternalValue] = React.useState<number | undefined>(\n    value || defaultValue\n  );\n\n  React.useEffect(() => {\n    if (value != null) {\n      setInternalValue(value);\n    }\n  }, [value]);\n\n  React.useEffect(() => {\n    if (defaultValue != null) {\n      setInternalValue(defaultValue);\n    }\n  }, [defaultValue]);\n\n  const minTrackColor = minimumTrackTintColor || theme.colors.primary;\n  const maxTrackColor = maximumTrackTintColor || theme.colors.light;\n  const thumbColor = thumbTintColor || theme.colors.primary;\n\n  const leftIconThemeColor = leftIconColor || theme.colors.light;\n  const rightIconThemeColor = rightIconColor || theme.colors.light;\n\n  const parsedValue = maybeParseValue(internalValue);\n\n  const handleSlidingComplete = (newValue: number) => {\n    setInternalValue(newValue);\n    onValueChange(newValue);\n  };\n\n  return (\n    <View style={[styles.container, style]} {...rest}>\n      {leftIcon ? (\n        <Icon color={leftIconThemeColor} name={leftIcon} size={24} />\n      ) : null}\n      <NativeSlider\n        value={parsedValue}\n        step={step}\n        minimumValue={minimumValue}\n        maximumValue={maximumValue}\n        tapToSeek={tapToSeek}\n        minimumTrackTintColor={minTrackColor}\n        maximumTrackTintColor={maxTrackColor}\n        thumbTintColor={thumbColor}\n        onSlidingComplete={handleSlidingComplete}\n        style={styles.slider}\n      />\n      {rightIcon ? (\n        <Icon color={rightIconThemeColor} name={rightIcon} size={24} />\n      ) : null}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 40,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  slider: {\n    flex: 1,\n    marginHorizontal: 12,\n  },\n});\n\nexport default withTheme(Slider);\n"]}