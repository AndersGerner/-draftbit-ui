{"version":3,"sources":["FieldSearchBarFull.tsx"],"names":["React","View","TextInput","StyleSheet","withTheme","Config","FieldSearchBarFull","showIcon","Icon","icon","placeholder","style","theme","colors","typography","onChange","changeOverride","onSubmit","submitOverride","value","defaultValue","focused","setIsFocused","useState","onBlur","internalValue","setInternalValue","useEffect","useCallback","text","onFocus","e","lineHeight","typeStyles","body2","handleChangeText","newValue","styles","container","fieldSearchBarFullIconSize","primary","light","marginLeft","flex","color","medium","create","flexDirection","alignItems"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {\n  View,\n  TextInput,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  NativeSyntheticEvent,\n  TextInputSubmitEditingEventData,\n} from \"react-native\";\nimport { withTheme } from \"../theming\";\nimport type { Theme } from \"../styles/DefaultTheme\";\nimport type { IconSlot } from \"../interfaces/Icon\";\nimport Config from \"./Config\";\n\ntype Props = {\n  showIcon: boolean;\n  icon?: string;\n  placeholder?: string;\n  style?: StyleProp<ViewStyle>;\n  theme: Theme;\n  onChange?: (text: string) => void;\n  onSubmit?: (e: NativeSyntheticEvent<TextInputSubmitEditingEventData>) => void;\n  value?: string;\n  defaultValue?: string;\n} & IconSlot;\n\nconst FieldSearchBarFull: React.FC<Props> = ({\n  showIcon,\n  Icon,\n  icon = \"search\",\n  placeholder = \"\",\n  style,\n  theme: { colors, typography },\n  onChange: changeOverride,\n  onSubmit: submitOverride,\n  value,\n  defaultValue,\n}) => {\n  const [focused, setIsFocused] = React.useState(false);\n\n  const onBlur = () => {\n    setIsFocused(false);\n  };\n\n  const [internalValue, setInternalValue] = React.useState<string | undefined>(\n    value || defaultValue\n  );\n\n  React.useEffect(() => {\n    if (value != null) {\n      setInternalValue(value);\n    }\n  }, [value]);\n\n  React.useEffect(() => {\n    if (defaultValue != null) {\n      setInternalValue(defaultValue);\n    }\n  }, [defaultValue]);\n\n  const onChange = React.useCallback(\n    (text: string) => {\n      changeOverride && changeOverride(text);\n    },\n    [changeOverride]\n  );\n\n  const onFocus = () => {\n    setIsFocused(true);\n  };\n\n  const onSubmit = (\n    e: NativeSyntheticEvent<TextInputSubmitEditingEventData>\n  ) => {\n    submitOverride && submitOverride(e);\n  };\n\n  const { lineHeight, ...typeStyles } = typography.body2; // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  const handleChangeText = (newValue: string) => {\n    setInternalValue(newValue);\n    if (onChange) {\n      onChange(newValue);\n    }\n  };\n\n  return (\n    <View style={[styles.container, style]}>\n      {showIcon && (\n        <Icon\n          name={icon}\n          size={Config.fieldSearchBarFullIconSize}\n          color={focused ? colors.primary : colors.light}\n        />\n      )}\n      <View style={{ marginLeft: showIcon ? 12 : 0, flex: 1 }}>\n        <TextInput\n          clearButtonMode=\"while-editing\"\n          placeholder={placeholder}\n          value={internalValue}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          onChangeText={handleChangeText}\n          onSubmitEditing={onSubmit}\n          placeholderTextColor={colors.light}\n          style={[\n            {\n              color: colors.medium,\n            },\n            typeStyles,\n          ]}\n        />\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n});\n\nexport default withTheme(FieldSearchBarFull);\n"]}