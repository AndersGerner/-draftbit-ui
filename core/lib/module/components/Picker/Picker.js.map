{"version":3,"sources":["Picker.tsx"],"names":["React","withTheme","PickerComponent","normalizeOptions","options","length","map","option","label","value","String","Error","Picker","placeholder","onValueChange","onValueChangeOverride","defaultValue","props","internalValue","setInternalValue","useState","useEffect","useCallback","itemValue","itemIndex","normalizedOptions","pickerOptions","handleValueChange","newValue"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { withTheme } from \"../../theming\";\n//@ts-ignore\nimport PickerComponent from \"./PickerComponent\"; //unable to find file due to using .android/.web/.ios\nimport { PickerComponentProps, PickerOption } from \"./PickerTypes\";\n\ntype Props = PickerComponentProps & {\n  placeholder?: string;\n  value?: string;\n  options: PickerOption[] | string[];\n};\n\nfunction normalizeOptions(options: Props[\"options\"]): PickerOption[] {\n  if (options.length === 0) {\n    return [];\n  }\n\n  if (typeof options[0] === \"string\") {\n    return (options as string[]).map((option) => ({\n      label: option,\n      value: String(option),\n    }));\n  }\n\n  if (options[0].label && options[0].value) {\n    return options.map((option) => {\n      return {\n        label: option.label,\n        value: String(option.value),\n      };\n    });\n  }\n\n  throw new Error(\n    'Picker options must be either an array of strings or array of { \"label\": string; \"value\": string; } objects.'\n  );\n}\n\nconst Picker: React.FC<Props> = ({\n  options = [],\n  placeholder,\n  onValueChange: onValueChangeOverride,\n  value,\n  defaultValue,\n  ...props\n}) => {\n  const [internalValue, setInternalValue] = React.useState<string | undefined>(\n    value || defaultValue\n  );\n\n  React.useEffect(() => {\n    if (value != null) {\n      setInternalValue(value);\n    }\n  }, [value]);\n\n  React.useEffect(() => {\n    if (defaultValue != null) {\n      setInternalValue(defaultValue);\n    }\n  }, [defaultValue]);\n\n  const onValueChange = React.useCallback(\n    (itemValue: string, itemIndex: number) => {\n      if (placeholder && itemIndex === 0) {\n        return;\n      }\n      onValueChangeOverride &&\n        onValueChangeOverride(String(itemValue), itemIndex);\n    },\n    [placeholder, onValueChangeOverride]\n  );\n\n  const normalizedOptions = normalizeOptions(options);\n\n  const pickerOptions = placeholder\n    ? [{ value: placeholder, label: placeholder }, ...normalizedOptions]\n    : normalizedOptions;\n\n  const handleValueChange = (newValue: string, itemIndex: number) => {\n    setInternalValue(newValue);\n    if (onValueChange) {\n      onValueChange(newValue, itemIndex);\n    }\n  };\n\n  return (\n    <PickerComponent\n      {...props}\n      selectedValue={String(internalValue)}\n      placeholder={placeholder}\n      options={pickerOptions}\n      onValueChange={handleValueChange}\n    />\n  );\n};\n\nexport default withTheme(Picker);\n"]}