{"version":3,"sources":["NumberInput.tsx"],"names":["React","TextInput","NumberInput","onChangeText","value","defaultValue","props","isDecimal","setIsDecimal","useState","Number","isInteger","useEffect","toString","includes","handleChangeText","newValue","parsedNumber","parseFloat","number","isNaN","strValue","undefined"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,cAA1B;;AAQA,MAAMC,WAA4B,GAAG,QAK/B;AAAA,MALgC;AACpCC,IAAAA,YADoC;AAEpCC,IAAAA,KAFoC;AAGpCC,IAAAA,YAHoC;AAIpC,OAAGC;AAJiC,GAKhC;AACJ,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,KAAK,CAACS,QAAN,CAChCL,KAAK,IAAI,CAACM,MAAM,CAACC,SAAP,CAAiBP,KAAjB,CADsB,CAAlC;AAGAJ,EAAAA,KAAK,CAACY,SAAN,CAAgB,MAAM;AACpB,QAAIR,KAAJ,EAAW;AACTI,MAAAA,YAAY,CAACJ,KAAK,CAACS,QAAN,GAAiBC,QAAjB,CAA0B,GAA1B,CAAD,CAAZ;AACD;AACF,GAJD,EAIG,CAACV,KAAD,CAJH;;AAMA,QAAMW,gBAAgB,GAAIC,QAAD,IAAsB;AAC7C,QAAIb,YAAJ,EAAkB;AAChB,YAAMc,YAAY,GAAGC,UAAU,CAACF,QAAD,CAA/B;AACA,YAAMG,MAAM,GAAGC,KAAK,CAACH,YAAD,CAAL,GAAsB,CAAtB,GAA0BA,YAAzC;AACAT,MAAAA,YAAY,CAACQ,QAAQ,CAACF,QAAT,CAAkB,GAAlB,CAAD,CAAZ;AACAX,MAAAA,YAAY,CAACgB,MAAD,CAAZ;AACD;AACF,GAPD;;AASA,MAAIE,QAAJ;;AACA,MAAIjB,KAAK,IAAIkB,SAAb,EAAwB;AACtBD,IAAAA,QAAQ,GAAGjB,KAAK,CAACS,QAAN,EAAX;;AACA,QAAIN,SAAS,IAAI,CAACc,QAAQ,CAACP,QAAT,CAAkB,GAAlB,CAAlB,EAA0C;AACxCO,MAAAA,QAAQ,GAAI,GAAEA,QAAS,GAAvB;AACD;AACF;;AAED,sBACE,oBAAC,SAAD;AACE,IAAA,YAAY,EAAC;AADf,KAEMf,KAFN;AAGE,IAAA,KAAK,EAAEe,QAHT;AAIE,IAAA,YAAY,EAAEhB,YAAF,aAAEA,YAAF,uBAAEA,YAAY,CAAEQ,QAAd,EAJhB;AAKE,IAAA,YAAY,EAAEE;AALhB,KADF;AASD,CAzCD;;AA2CA,eAAeb,WAAf,C,CAEA","sourcesContent":["import React from \"react\";\nimport { TextInput } from \"react-native\";\n\ninterface Props {\n  value?: number;\n  defaultValue?: number;\n  onChangeText: (value?: number) => void;\n}\n\nconst NumberInput: React.FC<Props> = ({\n  onChangeText,\n  value,\n  defaultValue,\n  ...props\n}) => {\n  const [isDecimal, setIsDecimal] = React.useState(\n    value && !Number.isInteger(value)\n  );\n  React.useEffect(() => {\n    if (value) {\n      setIsDecimal(value.toString().includes(\".\"));\n    }\n  }, [value]);\n\n  const handleChangeText = (newValue: string) => {\n    if (onChangeText) {\n      const parsedNumber = parseFloat(newValue);\n      const number = isNaN(parsedNumber) ? 0 : parsedNumber;\n      setIsDecimal(newValue.includes(\".\"));\n      onChangeText(number);\n    }\n  };\n\n  let strValue;\n  if (value != undefined) {\n    strValue = value.toString();\n    if (isDecimal && !strValue.includes(\".\")) {\n      strValue = `${strValue}.`;\n    }\n  }\n\n  return (\n    <TextInput\n      keyboardType=\"numeric\"\n      {...props}\n      value={strValue}\n      defaultValue={defaultValue?.toString()}\n      onChangeText={handleChangeText}\n    />\n  );\n};\n\nexport default NumberInput;\n\n// comment to try to fix sourcemap issue\n"]}